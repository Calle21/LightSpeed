Void main
  print " >> "
  String s = getLine
  if s == "quit" -> void
     else -> {Tok} toks = lex s
             if null toks -> main
                else -> printLn << eval << parse toks
                        main

union Tok = Int,Char

{Tok} lex (String s)
  tcase s
    Void -> void
    Cons Char -> Char c = s.car
                 if c == \space -> lex s.cdr
                    c `in` [\+,\-,\*,\/,\(,\)] -> c : lex s.cdr
                    digit c -> (String num,String s) = span (digit, s)
                               Int num = readint num
                               num the Int : lex s
                    else -> error "Unexpected character"

union Lang = Int, Call

struct Call
    Lang arg1
    Char op
    Lang arg2

Int eval (Lang l)
  tcase l
    Int -> l
    Call -> case l.op
              \+ -> eval l.arg1 + eval l.arg2
              \- -> eval l.arg1 - eval l.arg2
              \* -> eval l.arg1 * eval l.arg2
              \/ -> eval l.arg1 / eval l.arg2

Lang parse ({Tok} ls)
  (Lang l,{Tok} ls) = parseExpr ls
  tcase ls
    Void -> l
    Cons Tok -> error "Didn't expect closing paren"

(Lang,{Tok}) parseExpr ({Tok} ls)
  (Lang a, {Tok} ls) = parseSub ls
  tcase ls
    Void -> (a,ls)
    Cons Tok -> Tok tok = ls.car
                tcase tok
                  Char -> if tok `in` [\+,\-,\*,\/] -> parse1op (a,tok,ls.cdr)
                             tok == \) -> (a,ls)
                             true -> error "Expected operator or closing paren"
                  _ -> error "Expected operator or closing paren"

(Lang,{Tok}) parse1op (Lang a, Char op, {Tok} ls)
  (Lang b, {Tok} ls) = parseSub ls
  tcase ls
    Cons Tok -> Tok tok = ls.car
                tcase tok
                  Char -> if tok == \) -> (call (a,op,b),ls)
                             tok `in` [\+,\-,\*,\/] -> case getWinner (op,tok)
                                                         \l -> parse1op (call (a,op,b), tok, ls.cdr)
                                                         \r -> (Lang b, {Tok} ls) = parse1op (b,tok,ls.cdr)
                                                               (call (a,op,b),ls)
                             else -> error "Expected closing paren or operator"
                  _ -> error "Expected closing paren or operator"
    _ -> (call (a,op,b),ls)

Char getWinner (Char a, Char b)
  if getStrength a < getStrength b -> \r
     else -> \l

Int getStrength (Char c)
  if c `in` [\+,\-] -> 0
     c `in` [\*,\/] -> 1

(Lang,{Tok}) parseSub ({Tok} ls)
  tcase ls
    Cons Tok -> Tok tok = ls.car
                tcase tok
                  Int -> (tok,ls.cdr)
                  Char -> if tok == \( -> (Lang a, {Tok} ls) = parseExpr ls.cdr
                                          tcase ls
                                            Cons Tok -> Tok tok = ls.car
                                                        tcase tok
                                                          Char -> if tok == \) -> (a,ls.cdr)
                                                                     else -> error "Expected closing paren"
                                                          _ -> error "Expected closing paren"
                                            _ -> error "Expected closing paren"
                             else -> error "Unexpected character"
    _ -> error "Expected expression"

Void error (String s)
  print "Error: "
  printLn s
  main
