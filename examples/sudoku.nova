synonym SudokuTemplate = [Maybe Int]

synonym Sudoku = [Ref Maybe Int]

synonym Board = [Ref MList Int]

parallel Sudoku solveSudoku (SudokuTemplate sudt)
  Sudoku sud = makeSudoku sudt
  Board board = makeBoard
  @loop
    eliminate (sud,board)
    Bool changed = fill (board,sud)
    if not changed | done sud -> sud
       else -> loop

Sudoku makeSudoku (SudokuTemplate sudt)
  Sudoku sud = array ({9,9},nothing)
  each (a <- sudt
        b <- sud)
    b := a
  sud
    
Board makeBoard = array ({9,9},makeInitialSet)

MList Int makeInitialSet () = {1..9}

Void eliminate (Sudoku sud,Board board)
  for (x 0 8)
   for (y 0 8)
    Maybe Int i = read \ sud ! {x,y}
    tcase i
      Nothing -> void
      Int -> for (x 0 8)
               delete (i,board ! {x,y})
             for (y 0 8)
               delete (i, board {x,y})
             Int startx = x - (x % 3)
             Int starty = y - (y % 3)
             for (x startx (startx + 2))
              for (y starty (starty + 2))
               delete (i, board ! {x,y})

Bool fill (Board board,Sudoku sud)
  Ref Bool changed = false
  for (x 0 8)
   for (y 0 8)
    MList Int ls = read \ board ! {x,y}
    if length ls == 1 -> sud ! {x,y} := ls.car
                         changed := true
       else -> void
  read changed

Bool done (Sudoku sud) = all isInt sud

Bool isInt (Ref Maybe Int r)
  tcase read r
    Int -> true
    _   -> false

parallel {Sudoku} solveSudokus ({SudokuTemplate} sudts)
  tcase sudts
    Void -> void
    Cons SudokuTemplate -> solveSudoku sudts.car : solveSudokus sudts.cdr
