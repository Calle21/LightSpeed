Void calc
  print " >> "
  String s = getLine
  s == "quit" >> void
  List Tok toks = lex s
  null toks >> calc
  printLn (eval (parse toks))
  calc

union Tok = Int,Char

{Tok} lex (String s)
  tcase s
    Void      -> void
    Cons Char -> Char c = s.car
                 c == 'space >> lex s.cdr
                 c `in` ['+,'-,'*,'/,'(,')] >> c : lex s.cdr
                 digit c >> (String num,String s) = span (digit, s)
                            Int num = read num
                            num : lex s
                 error "Unexpected character"

union Lang = Int, Call

struct Call
    Lang arg1
    Char op
    Lang arg2

Int eval (Lang l)
  tcase l
    Int -> l
    Call -> case l.op
              '+ -> eval l.arg1 + eval l.arg2
              '- -> eval l.arg1 - eval l.arg2
              '* -> eval l.arg1 * eval l.arg2
              '/ -> eval l.arg1 / eval l.arg2

Lang parse ({Tok} ls)
  (Lang l,{Tok} ls) = parseExpr ls
  tcase ls
    Void -> l
    Cons Tok
      error "Didn't expect closing paren"

(Lang,{Tok}) parseExpr ({Tok} ls)
  (Lang a, {Tok} ls) = parseSub ls
  tcase ls
    Void -> (a,ls)
    Cons Tok
      Tok tok = ls.car
      tcase tok
        Char -> tok `in` ['+,'-,'*,'/] >> parse1op (a,tok,ls.cdr)
                tok == ') >> (a,ls)
                error "Expected operator or closing paren"
        error "Expected operator or closing paren"

(Lang,{Tok}) parse1op (Lang a, Char op, {Tok} ls)
  (Lang b, {Tok} ls) = parseSub ls
  tcase ls
    Cons Tok
      Tok tok = ls.car
      tcase tok
        Char -> tok == ') >> (call (a,op,b),ls)
                tok `in` ['+,'-,'*,'/] >> case getWinner (op,tok)
                                            'l -> parse1op (call (a,op,b), tok, ls.cdr)
                                            'r -> (Lang b, {Tok} ls) = parse1op (b,tok,ls.cdr)
                                                  (call (a,op,b),ls)
                error "Expected closing paren or operator"
        error "Expected closing paren or operator"
    (call (a,op,b),ls)

Char getWinner (Char a, Char b)
  getStrength a < getStrength b >> 'r
  'l

Int getStrength (Char c)
  c `in` ['+,'-] >> 0
  c `in` ['*,'/] >> 1

(Lang,{Tok}) parseSub ({Tok} ls)
  tcase ls
    Cons Tok
      Tok tok = ls.car
      tcase tok
        Int -> (tok,ls.cdr)
        Char -> tok == '( >> (Lang a, {Tok} ls) = parseExpr ls.cdr
                             tcase ls
                               Cons Tok -> Tok tok = ls.car
                                           tcase tok
                                             Char -> tok == ') >> (a,ls.cdr)
                                                     error "Expected closing paren"
                                             error "Expected closing paren"
                               error "Expected closing paren"
                error "Unexpected character"
    error "Expected expression"

Void error (String s)
  print "Error: "
  printLn s
  calc
