postfix ! ?                      \\ factorial, is

prefix ~ !! `not`                \\ converse, not, bits

infixr 9 << && ||                \\ composition[3]

infixl 9 `prefix` `suffix`       \\ prefix

infixr 8 ^                       \\ exp

infixl 8 `shiftl` `shiftr` `set` `decode` \\ bits[3]

infixr 7

infixl 7 * / `and`               \\ times, over, bits

infixr 6

infixl 6 + - `xor`               \\ plus, minus, bits

infixr 5 : ;                     \\ cons, dcons

infixl 5 `or`                    \\ bits

infixr 4

infixl 4 => == ~~ /=             \\ isin, equal, almostequal, notequal

infixr 3

infixl 3

infixr 2

infixl 2 `if`                    \\ if

infixr 1

infixl 1

infixr 0

infixl 0
