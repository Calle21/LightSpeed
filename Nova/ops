postfix ! ?                                                     \\ factorial, is

prefix ~ !! `not`                                               \\ converse, not, bits

infixr 5 ^ << && ||                                             \\ exp, composition[3]

infixl 5 `prefix` `suffix`                                      \\ prefix

infixr 4

infixl 4 * / `and` `shiftl` `shiftr` `or` `set` `decode` `xor`  \\ times, over, bits/`7`

infixr 3 : ;                                                    \\ cons, dcons

infixl 3 + -                                                    \\ plus, minus

infixr 2 `if`                                                   \\ if

infixl 2 => == ~~ /=                                            \\ isin, equal, almostequal, notequal

infixr 1 := \                                                   \\ assign, apply

infixl 1                                                        \\ if
