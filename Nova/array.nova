struct Array E
    Table E table
    {Int}   dimensions

Void strs (

E ([E] arr) ! ({Int} i)
  arr.table ! @loop (Int multFactor = 1
                {Int} dimensions = arr.dimensions
                {Int} i = i}
           tcase dimensions
             Void -> tcase i
                       Void -> 0
                       _ -> error "Too many dimensions in index"
             Cons Int -> tcase i
                           Cons Int -> if i.car < dimensions.car -> (i.car * multFactor) + loop (multFactor * dimensions.car
                                                                                                 dimensions.cdr
                                                                                                 i.cdr)
                                          else -> error "Index out of range"
                           _ -> error "Too few dimensions in index"

[E] array ({Int} dims, E start) = array (dims,start)

[E] array ({Int} dims, E << () build) = array (dims,build)

Maybe Int binsearch (E elem, [E] arr)
  @loop (Int lo = 0, Int hi = length arr - 1)
    if lo > hi -> failure
       else -> Int mid = (lo + hi) / 2
               E midelem = arr ! mid
               if elem < midelem -> loop (lo, mid - 1)
                  elem > midelem -> loop (mid + 1, hi)
                  else -> mid

[E] subseq ([E] arr,Int start,Int end) = subseq (arr,start,end)

[E] fromList ({E} ls) = fromList ls

Bool member (I id, [E] arr, I <- E fn = id)
  @loop (Int i = 0)
    if i == length arr -> false
       id == fn \ arr ! {i} -> true
       else -> loop (i + 1)

Int length ([E] arr)
  {Int} dims = arr.dimensions
  if null dims -> 0
     else -> foldr (`*`,1,dims)

{E} list ([E] arr)
  @loop (Int i = 0)
    if i == length arr -> void
       else -> (arr.table ! i) : loop (i + 1)

Void aSort ([Mutable E] arr) = sort (arr, `<`, id)

Void dSort ([Mutable E] arr) = sort (arr, `>`, id)

Void sort ([Mutable E] arr, Bool <- (I,I) comp, I <- E on)
  @sort (Int lo = 0, Int hi = length arr - 1)
    if hi <= lo -> void
       else -> swap (arr, lo, (lo + hi) / 2)
               I midid = on \ arr ! {lo}
               @loop (Int midindex = lo
                      Int hiindex = hi)
                 if midindex == hiindex -> sort (lo,midindex - 1)
                                           sort (midindex + 1,hi)
                    else -> if on (arr ! {midindex + 1}) `comp` midid -> swap (arr,midindex,midindex + 1)
                                                                         loop (midindex + 1,hiindex)
                               else -> swap (arr,midindex + 1,hiindex)
                                       loop (midindex,hiindex - 1)

[E] aSort ([E] arr) = sort (arr,`<`,id)

[E] dSort ([E] arr) = sort (arr,`>`,id)

[E] sort ([E] arr, Bool <- (I,I) comp, I <- E on)
  fromList \ sort (list arr, comp, on)

Void swap ([Mutable E] arr, Int i0, Int i1)
  E temp = arr ! i0
  arr ! i0 := arr ! i1
  arr ! i1 := temp

 -- Pools

struct Pool OBJ
    [Mutable OBJ] arr
    Mutable Int   vacant

Pool OBJ makePool (Int size, OBJ <- () builder)
  pool
    (array (size,builder)
     size)

OBJ getObj (Pool OBJ p, OBJ <- () builder)
  Int v = p.vacant
  if v == 0 -> builder ()
     else -> Int v = v - 1
             p.vacant := v
             p.arr ! v

Void returnObj (OBJ obj, Pool OBJ p)
  Int v = p.vacant
  if v == length p.arr -> void
     else -> p.arr ! v := obj
             p.vacant := v + 1

 -- Stacks

struct Stack E
    [Mutable (E | Void)] arr
    Mutable Int          size

Stack E makeStack (Int size)
  stack (array (size,void), 0)

E pop (Stack E s)
  Int num = s.size
  if num == 0 -> error "Stack underflow"
     else -> Int num = num - 1
             s.size := num
             E ret = s.arr ! num
             s.arr ! num := void
             ret

Void push (E obj, Stack E s)
  Int num = s.size
  if num == length s.arr -> error "Stack overflow"
     else -> s.arr ! num := obj
             s.size := num + 1
