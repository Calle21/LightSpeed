union Doubly E = DoublyNode E, Void

struct DoublyNode E
    Doubly E before
    E        elem
    Doubly E after

E (Doubly E d) ' (Int n)
  tcase d
    Void -> error "Index out of scope"
    DoublyNode E -> if n == 0 -> d.elem
                       else -> d.after ' (n - 1)

E (Doubly E d) '' (Int n)
  tcase d
    Void -> error indexOut
    DoublyNode E -> if n == 0 -> d.elem
                       else -> d.before ' (n - 1)

DoublyNode E circle (Cons E ls)
  (DoublyNode E first
   DoublyNode E last) = @loop (DoublyNode E prev = last
                               {E} ls = ls
                               DoublyNode E next = first)
                          tcase ls
                            Void -> (next,prev)
                            Cons E -> DoublyNode E this = doublyNode (prev,ls.car,rest)
                                      (DoublyNode E rest
                                       DoublyNode E last) = loop (this,ls.cdr,next)
                                      (this,last)
  first

Doubly E fromList ({E} ls)
  @loop (Doubly E prev = void
         {E} ls = ls)
    tcase ls
      Void -> void
      Cons E -> rec DoublyNode E d = doublyNode (prev,ls.car,loop (d,ls.cdr))
                d
