union Doubly E = DoublyNode E, Void

struct DoublyNode E
    Mutable (Doubly E) before
    E                  elem
    Mutable (Doubly E) after

Doubly E fromList ({E} ls)
  tcase ls
    Void -> void
    Cons E -> foldl (insertAfter
                     doublyNode (void,ls.car,void)
                     ls.cdr)

Doubly E insertAfter (Doubly E d, E elt)
  tcase d
    Void -> error "Void doubly"
    DoublyNode E -> Doubly E after = d.after
                    Doubly E d0 = doublyNode (d,elt,after)
                    d.after := d0
                    tcase after
                      Void -> d0
                      DoublyNode E -> after.before := d0
                                      d0

Doubly E insertBefore (Doubly E d, E elt)
  tcase d
    Void -> error "Void doubly"
    Doubly E -> Doubly E before = d.before
                Doubly E d0 = doublyNode (before,elt,d)
                d.before := d0
                tcase before
                  Void -> d0
                  DoublyNode E -> before.after := d0
                                  d0
