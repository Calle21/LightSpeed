In Nova there are 3 primitive types from which all other types are derived. These are

1. Int
2. Table
3. Tuple

Int
The Int is simply a signed integer of a specified width

The width of Int is likely to be as wide as a word on the computer architecture, but it doesn't have to be.

The Nova standard library derives 'Float', 'Char', 'Bool' and 'Comparison' from the 'Int'

Table
A table is a series of elements of the same type allocated in sequence. This means that any element is accessed with the same amount of time

Unlike the 'Int', the Table type takes one type-parameter. This means that there are tables containing Int, tables containing Char and so on

Table Int

Table Char

The 'Table' type is not very useful. Often you'll use arrays instead. However, strings in Nova are tables

synonym String = Table Char

is defined in the Nova-library

Tuple
Tuples are like anonymous structs. The elements of a tuple doesn't have to be of the same type

(1,2,3)

The types of the elements can be different

(1,'a,"hello")

A one element tuple is equivalent to its' element. There is no difference between (a) and 'a' except in how it is parsed.

When applying a function to several arguments, a multi-element tuple is used. When returning several values, a multi-element tuple is used. This means that a function returning several values can be directly applied to another function expecting a tuple of the same type













Struct
A struct is really a tuple, but with named fields. Structs can also inherit traits from classes, which tuples do not.

You define new structs with the 'struct' keyword. Like this

struct Point
    Int x
    Int y

You can include type variables, like this

struct Cons E
    E      car
    List E cdr

When type variables are included, you really create a template for a struct. No actual struct is defined until you apply this template with an argument to E

The fields of a struct can be accessed with dot notation. Like this

p.x = (access "x" p)
p.y = (access "y" p)

The parser will expand dots into calls to the 'access' function

When defining a struct, a function with the name of the struct, but with the first letter in lower case, is created. This function can be used to create instances of that struct. For example, given our definition of 'Point' above, new points would be created like this

point (1,2)

which would create a point where x i 1, and y is 2

Function
The function type is not a type you typically work with, except you work with it all the time. A function 

Union
A union is a type which is not known at compile time. A union is really a two-element tuple, where one element contains a type descriptor, telling what type is currently in this union, and then the value itself.

All unions are limited. That is, no union may contain any type what so ever

Defining your own types

The programmer has 6 keywords with which to create new types. These are

