struct Cons E
    E   car
    {E} cdr

union List E = Cons E, Void

Cons E (E elt) \: ({E} rest)
  cons (elt, rest)

infixr {E} ({E} a) ++ ({E} b)
  tcase b
    Void -> a
    _ -> foldr (:, b, a)

E ({E} ls) ! (Int i)
  tcase ls
    Void   -> error "Index out of scope"
    Cons E -> if i == 0 -> ls.car
                 else -> ls.cdr ! (i - 1)

{E} ({E} ls) ! (Int n)
  if n == 0 -> ls
     else -> tcase ls
               Void -> error "Index of out scope"
               Cons E -> ls.cdr ! (n - 1)

Bool all (Bool <- E fn, {E} ls)
  tcase ls
    Void -> true
    Cons E -> fn ls.car & all (fn,ls.cdr)

Maybe E (K key) `assoc` ({(K,E)} alist)
  tcase alist
    Void -> void
    Cons (K,E) -> (K,E) node = alist.car
                  if key == 1of2 node -> 2of2 node
                     else -> key `assoc` alist.cdr

Cons E circle (Cons E ls)
  rec Cons E ls0 = fromList ls ++ ls0
  ls0

{E} conc ({{E}} lss)
  foldr (`++`,void,lss)

{E} drop (Int n, {E} ls)
  if n == 0 -> ls
     else -> tcase ls
               Void -> void
               Cons E -> drop (n - 1, ls.cdr)

{E} dropWhile (Bool <- E fn, {E} ls)
  tcase ls
    Void -> void
    Cons E -> if fn ls.car -> dropWhile (fn, ls.cdr)
                 else -> ls

{E} filter (Bool <- E fn, {E} ls)
  {x | E x <- ls , fn}

infixl Maybe E find (I id, {E} ls, I <- E fn = id)
  tcase ls
    Void -> void
    Cons E -> if id == fn ls.car -> ls.car
                 else -> find (id, ls.cdr, fn)

B foldl (B <- (B,A) fn, B start, {A} ls)
  tcase ls
    Void -> start
    Cons A -> foldl (fn, fn (start, ls.car), ls.cdr)

B foldr (B <- (A,B) fn, B end, {A} ls)
  tcase ls
    Void -> end
    Cons A -> fn (ls.car, foldr (fn, end, ls.cdr))

{E} fromThenTo (E a, E b, E stop)
  E diff = b - a
  a : b : @rec (E c = b + diff)
            if c > stop -> void
               else -> c : rec (c + diff)

Maybe E head ({E} ls)
  tcase ls
    Void -> nothing
    Cons E -> ls.car

E head (Cons E cs) = cs.car


{E} intersect ({{E}} lss}
  intersectOn (id,lss)

{E} intersectOn (A <- E fn, {{E}} lss)
  if length lss == 1 -> head lss
     else -> @loop ({{E}} lss0 = lss)
               tcase lss0
                 Void -> void
                 Cons E -> @build ({E} ls = lss0.car)
                             tcase ls
                               Void -> loop lss0.cdr
                               Cons E -> E elt = ls.car
                                         if all (member (fn elt,#1,fn),lss) -> elt : build ls.cdr
                                            else -> build ls.cdr

Cons E last (Cons E ls)
  tcase ls.cdr
    Void -> ls
    Cons E -> last ls.cdr

E last (Cons E ls)
  (last ls).car

Int length ({E} ls)
  tcase ls
    Void   -> 0
    Cons E -> 1 + length ls.cdr

{B} map (B <- A fn, {A} ls)
  tcase ls
    Void   -> void
    Cons E -> fn ls.car : map (fn, ls.cdr)

Void map (Void << A act, {A} ls)
  each (A a <- ls)
    act a

{B} mapConc ({B} <- A fn, {A} ls)
  conc \ map (fn,ls)

{B} map2 (B <- (A,A) fn, {A} ls)
  match ls
    (a:b:_) -> (a `fn` b) : map2 (fn,ls.cdr)
    _       -> void

{B} map2 (B <- (A,A) fn, B default, {A} ls)
  @loop ((A | Void) a = void
         {A} = ls)
    tcase ls
      Void -> {default}
      Cons A -> tcase a
                  Void -> default : loop (ls.car,ls.cdr)
                  A -> b = ls.car
                       (a `fn` b) : loop (b,ls.cdr)

Bool member (I id, {E} ls, I <- E on = id)
  tcase ls
    Void -> false
    Cons E -> if id == on ls.car -> true
                 else -> member (id,ls.cdr,on)

{E} nub ({E} ls)
  @loop ({E} acc = {}
         {E} ls = ls)
    tcase ls
      Void -> reverse acc
      Cons E -> if ls.car `in` acc -> loop (acc, ls.cdr)
                   else -> loop (ls.car : acc, ls.cdr)

({E}, {E}) partition (Bool <- E fn, {E} ls)
  (filter (fn, ls)
   filter (not `compose` fn, ls))

Bool ({E} a) `prefix` ({E} b)
  @loop ({E} a0 = a, {E} b0 = b)
    tcase a0
      Void   -> true
      Cons E -> tcase b0
                  Void   -> false
                  Cons E -> if a0.car == a1.car -> loop (a0.cdr, a1.cdr)
                               else -> a `prefix` b.cdr

{E} aSort ({E} ls) = sort (ls,`<`,id)

{E} dSort ({E} ls) = sort (ls,`>`,id)

{E} sort ({E} ls, Bool <- (I,I) comp = `<`, I <- E on)
  Bool comp0 (E e0, E e1) = on e0 `comp` on e1
  @loop ({E} ls = ls)
    tcase ls
      Void   -> void
      Cons E -> if null ls.cdr -> ls
                   else -> E mid = ls.car
                           {E} before = filter (ls, #1 `comp0` mid)
                           {E} after = filter (ls, mid `comp0` #1)
                           loop before ++ {mid} ++ loop after

{E} repeat (E elt, Int n)
  if n == 0 -> void
     else -> elt : repeat (elt, n - 1)

{E} reverse ({E} ls)
  foldl (#2 : #1, {}, #1)

{E} rplaca ({E} ls, E obj)
  tcase ls
    Cons E -> obj : ls.cdr
    Void -> error "Empty list"

{E} rplacd ({E} ls0, {E} ls1)
  tcase ls0
    Cons E -> ls0.cdr := ls1
              ls0
    Void -> error "Empty list"

({E}, {E}) span (Bool <- E fn, {E} ls)
  (takeWhile (fn, ls)
   dropWhile (fn, ls))

{E} subseq ({E} ls, Int start, Int end)
  take (end - start,drop (start ls))

Maybe {E} tail ({E} ls)
  tcase ls
    Void -> nothing
    Cons E -> ls.cdr

{E} tail (Cons E ls) = ls.cdr

{E} take (Int n, {E} ls)
  if n <= 0 -> void
     true -> tcase ls
               Void   -> void
               Cons E -> ls.car : take (n - 1, ls.cdr)

{E} takeWhile (Bool <- E fn, {E} ls)
  tcase ls
    Void   -> void
    Cons E -> if fn ls.car -> ls.car : takeWhile (fn, ls.cdr)
                 true -> void

{E} unite ({E} a, {E} b, I <- E on = id) = { x
                                           | x <- a , lambda (E x) -> not \ member (on x,b,on)
                                           | b }

({A},{B}) unzip ({(A,B)} ab)
  tcase ab
    Void -> ({},{})
    Cons (A,B) -> (a,b) = unzip ab.cdr
                  (1of2 ab.car : a
                   2of2 ab.car : b)

{(A,B)} zip ({A} a, {B} b)
  {(a,b) | A a <- a | B b <- b}
