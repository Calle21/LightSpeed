(Prim A a) `and` (Prim B b) = intermediate A
                              (and #a #b)

(Prim A a) `or` (Prim B b)  = intermediate A
                              (or #a #b)

(Prim A a) `xor` (Prim B b) = intermediate A
                              (xor #a #b)

(Prim A a) `shiftl` (Int b) = intermediate A
                              (sl #a #b)

(Prim A a) `shiftr` (Int b) = intermediate A
                              (srl #a #b)

(Prim A a) `shiftar` (Int b) = intermediate A
                               (sra #a #b)

(Prim A a) `set` (Int b) where 0 <= b < bitsize a = intermediate A
                                                    (or #a (exp 2 #b))

(Prim A a) `clear` (Int b) where 0 <= b < bitsize a = intermediate A
                                                      (and #a (not (exp 2 #b)))

(Prim A *a) `decode` (Int b) where 0 <= < bitsize a
  (dec b) = intermediate (A,A)
            (and #a (sub (exp 2 b) 1)),
            (sr #a #b)
  a := b >> dec

`not` (Prim A a) = intermediate A
                   (not #a)
